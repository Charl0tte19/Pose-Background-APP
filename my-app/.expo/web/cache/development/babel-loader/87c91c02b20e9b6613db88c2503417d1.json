{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"D:\\\\app\\\\my-app\\\\sevenpage.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport { PanGestureHandler, PinchGestureHandler } from 'react-native-gesture-handler';\nvar tag = '[GESTURE]';\n\nvar RnGestureHandler = function (_Component) {\n  _inherits(RnGestureHandler, _Component);\n\n  var _super = _createSuper(RnGestureHandler);\n\n  function RnGestureHandler() {\n    var _this;\n\n    _classCallCheck(this, RnGestureHandler);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.translateX = new Animated.Value(0);\n    _this.translateY = new Animated.Value(0);\n    _this.scale = new Animated.Value(1);\n    _this.handleGesture = Animated.event([{\n      nativeEvent: {\n        scale: _this.scale\n      }\n    }], {\n      useNativeDriver: true\n    });\n\n    _this._onGestureStateChange = function (event) {\n      console.log(tag, event.nativeEvent);\n\n      _this.scale.setValue(event.nativeEvent.scale);\n    };\n\n    return _this;\n  }\n\n  _createClass(RnGestureHandler, [{\n    key: \"render\",\n    value: function render() {\n      console.log(tag, this.scale);\n      var circleTransformStyle;\n      circleTransformStyle = {\n        transform: [{\n          translateY: this.translateY\n        }, {\n          translateX: this.translateX\n        }]\n      };\n      var scaleStyle = {\n        transform: [{\n          perspective: 200\n        }, {\n          scale: this.scale\n        }]\n      };\n      return React.createElement(View, {\n        style: [styles.container],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 13\n        }\n      }, React.createElement(PinchGestureHandler, {\n        onGestureEvent: this.handleGesture,\n        onHandlerStateChange: this._onGestureStateChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 13\n        }\n      }, React.createElement(Animated.View, {\n        style: [styles.circle, scaleStyle],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 13\n        }\n      })));\n    }\n  }]);\n\n  return RnGestureHandler;\n}(Component);\n\nexport { RnGestureHandler as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: \"center\",\n    flexDirection: \"column\",\n    backgroundColor: \"#fff\"\n  },\n  image: {\n    width: 250,\n    height: 250\n  },\n  circle: {\n    width: 150,\n    height: 150,\n    alignSelf: 'center',\n    backgroundColor: \"#c00000\",\n    borderRadius: 100\n  },\n  title: {\n    fontSize: 20,\n    textAlign: \"center\"\n  },\n  separator: {\n    width: \"100%\",\n    height: 1,\n    backgroundColor: \"#ccc\"\n  },\n  leftItem: {\n    flex: 1,\n    backgroundColor: \"#76a21e\",\n    justifyContent: \"center\"\n  }\n});","map":{"version":3,"sources":["D:/app/my-app/sevenpage.js"],"names":["React","Component","PanGestureHandler","PinchGestureHandler","tag","RnGestureHandler","translateX","Animated","Value","translateY","scale","handleGesture","event","nativeEvent","useNativeDriver","_onGestureStateChange","console","log","setValue","circleTransformStyle","transform","scaleStyle","perspective","styles","container","circle","StyleSheet","create","flex","justifyContent","flexDirection","backgroundColor","image","width","height","alignSelf","borderRadius","title","fontSize","textAlign","separator","leftItem"],"mappings":"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","sourcesContent":["\r\nimport React, { Component } from 'react'\r\nimport { Text, View,StyleSheet ,Animated} from 'react-native'\r\nimport  {PanGestureHandler,PinchGestureHandler} from 'react-native-gesture-handler'\r\nconst tag ='[GESTURE]'\r\nexport default class RnGestureHandler extends Component {\r\n\r\n translateX = new Animated.Value(0)\r\n translateY = new Animated.Value(0)\r\n scale  = new Animated.Value(1)\r\n\r\n   // handleGesture = Animated.event([{nativeEvent: {translationX: this.translateX,translationY:this.translateY,scale:this.scale}}], { useNativeDriver: true });\r\n   handleGesture = Animated.event([{nativeEvent: {scale:this.scale}}], { useNativeDriver: true });\r\n    _onGestureStateChange = (event)=>{\r\n   console.log(tag,event.nativeEvent)\r\n   this.scale.setValue(event.nativeEvent.scale)\r\n    }\r\n   \r\n    render() {\r\n\r\n        console.log(tag,this.scale)\r\n        let circleTransformStyle \r\n        circleTransformStyle = {\r\n                transform:[\r\n                    {\r\n                        translateY : this.translateY\r\n                    },\r\n                    {\r\n                        translateX : this.translateX\r\n                    }\r\n                ]\r\n            }\r\n\r\n        let scaleStyle = {\r\n            transform:[\r\n                { perspective: 200 },\r\n                {\r\n                    scale :  this.scale\r\n                }\r\n            ]\r\n        }\r\n   \r\n        return (\r\n            <View style={[styles.container]} >\r\n            <PinchGestureHandler onGestureEvent={this.handleGesture} onHandlerStateChange={this._onGestureStateChange}>\r\n            <Animated.View style={[styles.circle,scaleStyle]} />\r\n            </PinchGestureHandler>\r\n            </View>\r\n        )\r\n    }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n      flex: 1,\r\n      justifyContent: \"center\",\r\n      flexDirection: \"column\",\r\n      backgroundColor: \"#fff\"\r\n    },\r\n    image:{\r\n        width:250,\r\n        height: 250 \r\n    },\r\n    circle: {\r\n        width: 150,\r\n        height: 150,\r\n        alignSelf:'center',\r\n        backgroundColor: \"#c00000\",\r\n        borderRadius: 100\r\n      },\r\n    title:{\r\n        fontSize:20,\r\n        textAlign:\"center\"\r\n    },\r\n    separator: {\r\n      width: \"100%\",\r\n      height: 1,\r\n      backgroundColor: \"#ccc\"\r\n    },\r\n    leftItem: {\r\n      flex: 1,\r\n      backgroundColor: \"#76a21e\",\r\n      justifyContent: \"center\"\r\n    }})"]},"metadata":{},"sourceType":"module"}